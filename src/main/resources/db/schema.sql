create table if not exists age_limits
(
    name        varchar(255) not null
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    description varchar(255) not null,
    start_age   integer      not null
);

create table if not exists countries
(
    code        varchar(255) not null
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    full_name   varchar(255) not null,
    short_name  varchar(255) not null
);

create table if not exists films
(
    id                  bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    status              varchar(255)                                       not null,
    insert_date         timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date         timestamp with time zone,
    date_local_premiere timestamp with time zone                           not null,
    name                varchar(255)                                       not null,
    plot                text                     default ''::text          not null,
    date_world_premiere timestamp with time zone,
    age_limit_id        varchar(255)                                       not null
        references age_limits,
    duration            integer                  default 0                 not null
);

create table if not exists country_film
(
    id         bigint generated always as identity (maxvalue 2147483647)
        primary key,
    film_id    bigint       not null
        references films,
    country_id varchar(255) not null
        references countries
);

create table if not exists film_posters
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    filename    varchar(255) not null,
    film_id     bigint       not null
        references films
);

create table if not exists filmmakers
(
    id          bigint generated by default as identity
        primary key,
    first_name  varchar(255)                                       not null,
    last_name   varchar(255)                                       not null,
    patronymic  varchar(255),
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create table if not exists filmmaker_posts
(
    id           bigint generated by default as identity
        primary key,
    name         varchar(255)                                       not null,
    filmmaker_id bigint                                             not null
        references filmmakers
            on update cascade on delete cascade,
    film_id      bigint                                             not null
        references films,
    insert_date  timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date  timestamp with time zone,
    status       varchar(255)                                       not null
);

create table if not exists halls
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    name        varchar(255)                                       not null
);

create table if not exists film_screenings
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    date        timestamp with time zone           not null,
    film_id     bigint                             not null
        references films,
    hall_id     bigint                             not null
        references halls,
    price       numeric(10, 4)           default 0 not null
);

create table if not exists seats
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    unused      boolean                  default false             not null,
    number      integer                                            not null,
    row         integer                                            not null,
    hall_id     bigint                                             not null
        references halls
);

create table if not exists users
(
    id            bigint generated by default as identity
        primary key,
    status        varchar(255)                                       not null,
    insert_date   timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date   timestamp with time zone,
    hash_password varchar(255)                                       not null,
    user_status   varchar(255)                                       not null,
    username      varchar(255)                                       not null
        unique,
    first_name    varchar(255)                                       not null,
    last_name     varchar(255)                                       not null,
    patronymic    varchar(255),
    gender        varchar(255)                                       not null,
    birth_date    timestamp with time zone                           not null
);

create table if not exists user_roles
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    role        varchar(255)                                       not null,
    user_id     bigint                                             not null
        references users
);

create table if not exists reservations
(
    id                bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    status            varchar(255)                                       not null,
    insert_date       timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date       timestamp with time zone,
    expiry_date       timestamp with time zone                           not null,
    user_id           bigint                                             not null
        references users,
    film_screening_id bigint                                             not null
        references film_screenings,
    place_id          bigint                                             not null
        references seats
);

create table if not exists purchases
(
    id          bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    user_id     bigint                                             not null
        references users,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create table if not exists tickets
(
    id                bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    status            varchar(255)                                       not null,
    insert_date       timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date       timestamp with time zone,
    film_screening_id bigint                                             not null
        references film_screenings,
    seat_id           bigint                                             not null
        references seats,
    purchase_id       bigint                                             not null
        constraint tickets_purchases_id_fk
            references purchases,
    price             numeric(10, 3)                                     not null
);

create table if not exists client_sessions
(
    id          uuid                                               not null
        primary key,
    name        varchar(255),
    client_ipv4 varchar(255),
    client_ipv6 varchar(255),
    user_id     bigint                                             not null
        constraint client_sessions_users_id_fk
            references users,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create table if not exists refresh_tokens
(
    id          bigint generated by default as identity
        primary key,
    token       varchar(255)                                       not null
        unique,
    client_id   uuid                                               not null
        references client_sessions,
    expiry_date timestamp with time zone                           not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create table if not exists user_notifications
(
    id                  bigint generated always as identity
        primary key,
    user_id             bigint                                                           not null
        references users,
    message             varchar(500)                                                     not null,
    insert_date         timestamp with time zone default CURRENT_TIMESTAMP               not null,
    update_date         timestamp with time zone,
    status              varchar(255)             default 'ACTIVE'::character varying     not null,
    notification_status varchar(255)             default 'NOT_VIEWED'::character varying not null
        constraint user_notifications_notification_status_check
            check ((notification_status)::text = ANY
                   (ARRAY [('VIEWED')::text, ('NOT_VIEWED')::text]))
);

create table if not exists ticket_refunds
(
    id               bigserial
        constraint ticket_refunds_pk
            primary key,
    ticket_id        bigint                                                       not null
        constraint ticket_refunds_tickets_id_fk
            references tickets,
    insert_date      timestamp with time zone default CURRENT_TIMESTAMP           not null,
    canceled_by_user bigint                                                       not null
        constraint ticket_refunds_users_id_fk
            references users,
    update_date      timestamp with time zone,
    status           varchar(255)             default 'ACTIVE'::character varying not null
);

create table if not exists film_marks
(
    id          bigint generated by default as identity (maxvalue 2147483647)
        constraint film_ratings_pkey
            primary key,
    user_id     bigint                                             not null
        constraint film_ratings_user_id_fkey
            references users,
    film_id     bigint                                             not null
        constraint film_ratings_film_id_fkey
            references films,
    mark        integer                                            not null
        constraint film_ratings_rating_check
            check ((mark > 0) AND (mark <= 10)),
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create unique index if not exists film_ratings_customer_id_film_id_uindex
    on film_marks (user_id, film_id);

create or replace view pg_stat_statements
            (userid, dbid, queryid, query, calls, total_time, min_time, max_time, mean_time, stddev_time, rows,
             shared_blks_hit, shared_blks_read, shared_blks_dirtied, shared_blks_written, local_blks_hit,
             local_blks_read, local_blks_dirtied, local_blks_written, temp_blks_read, temp_blks_written, blk_read_time,
             blk_write_time)
as
SELECT pg_stat_statements.userid,
       pg_stat_statements.dbid,
       pg_stat_statements.queryid,
       pg_stat_statements.query,
       pg_stat_statements.calls,
       pg_stat_statements.total_time,
       pg_stat_statements.min_time,
       pg_stat_statements.max_time,
       pg_stat_statements.mean_time,
       pg_stat_statements.stddev_time,
       pg_stat_statements.rows,
       pg_stat_statements.shared_blks_hit,
       pg_stat_statements.shared_blks_read,
       pg_stat_statements.shared_blks_dirtied,
       pg_stat_statements.shared_blks_written,
       pg_stat_statements.local_blks_hit,
       pg_stat_statements.local_blks_read,
       pg_stat_statements.local_blks_dirtied,
       pg_stat_statements.local_blks_written,
       pg_stat_statements.temp_blks_read,
       pg_stat_statements.temp_blks_written,
       pg_stat_statements.blk_read_time,
       pg_stat_statements.blk_write_time
FROM pg_stat_statements(true) pg_stat_statements(userid, dbid, queryid, query, calls, total_time, min_time, max_time,
                                                 mean_time, stddev_time, rows, shared_blks_hit, shared_blks_read,
                                                 shared_blks_dirtied, shared_blks_written, local_blks_hit,
                                                 local_blks_read, local_blks_dirtied, local_blks_written,
                                                 temp_blks_read, temp_blks_written, blk_read_time, blk_write_time);

grant select on pg_stat_statements to public;

create or replace view pg_buffercache
            (bufferid, relfilenode, reltablespace, reldatabase, relforknumber, relblocknumber, isdirty, usagecount,
             pinning_backends)
as
SELECT p.bufferid,
       p.relfilenode,
       p.reltablespace,
       p.reldatabase,
       p.relforknumber,
       p.relblocknumber,
       p.isdirty,
       p.usagecount,
       p.pinning_backends
FROM pg_buffercache_pages() p(bufferid integer, relfilenode oid, reltablespace oid, reldatabase oid,
                              relforknumber smallint, relblocknumber bigint, isdirty boolean, usagecount smallint,
                              pinning_backends integer);

grant select on pg_buffercache to pg_monitor;

create or replace view screening_seats(id, number, row, screening_id, status_seat) as
SELECT DISTINCT s.id,
                s.number,
                s."row",
                fs.id                         AS screening_id,
                CASE
                    WHEN t.status::text = 'ACTIVE'::text THEN 'BOUGHT'::text
                    WHEN r.status::text = 'ACTIVE'::text AND r.expiry_date > CURRENT_TIMESTAMP THEN 'RESERVED'::text
                    WHEN s.unused = true THEN 'UNUSED'::text
                    ELSE 'FREE'::text
                    END::character varying(8) AS status_seat
FROM seats s
         JOIN halls h ON h.id = s.hall_id
         JOIN film_screenings fs ON h.id = fs.hall_id
         LEFT JOIN tickets t ON s.id = t.seat_id AND t.film_screening_id = fs.id AND t.status::text = 'ACTIVE'::text
         LEFT JOIN reservations r
                   ON s.id = r.place_id AND r.film_screening_id = fs.id AND r.expiry_date > CURRENT_TIMESTAMP AND
                      r.status::text = 'ACTIVE'::text
WHERE s.status::text = 'ACTIVE'::text
  AND fs.status::text = 'ACTIVE'::text
  AND h.status::text = 'ACTIVE'::text;

create or replace view film_ratings
            (id, status, insert_date, update_date, date_local_premiere, name, plot, date_world_premiere, age_limit_id,
             duration, rating)
as
SELECT f.id,
       f.status,
       f.insert_date,
       f.update_date,
       f.date_local_premiere,
       f.name,
       f.plot,
       f.date_world_premiere,
       f.age_limit_id,
       f.duration,
       avg_marks.rating
FROM films f
         JOIN (SELECT film_marks.film_id,
                      avg(film_marks.mark) AS rating
               FROM film_marks
               GROUP BY film_marks.film_id) avg_marks ON avg_marks.film_id = f.id;

create or replace view purchase_stat(purchase_id, purchase_date, count_tickets, film_screening_id, film_id) as
SELECT p.id          AS purchase_id,
       p.insert_date AS purchase_date,
       count(t.id)   AS count_tickets,
       fs.id         AS film_screening_id,
       f.id          AS film_id
FROM purchases p
         JOIN tickets t ON p.id = t.purchase_id
         JOIN film_screenings fs ON fs.id = t.film_screening_id
         JOIN films f ON f.id = fs.film_id
WHERE t.status::text = 'ACTIVE'::text
GROUP BY fs.id, p.id, p.insert_date, f.id
HAVING count(t.id) <> 0;

create or replace view hall_occupancy_stat
            (hall_id, film_id, film_screening_id, film_screening_date, purchase_date, hall_size, count) as
SELECT h.id            AS hall_id,
       f.id            AS film_id,
       fs.id           AS film_screening_id,
       fs.date         AS film_screening_date,
       p.insert_date   AS purchase_date,
       size_hall(h.id) AS hall_size,
       count(t.id)     AS count
FROM tickets t
         JOIN purchases p ON p.id = t.purchase_id
         JOIN film_screenings fs ON t.film_screening_id = fs.id
         JOIN halls h ON h.id = fs.hall_id
         JOIN films f ON f.id = fs.film_id
WHERE t.status::text = 'ACTIVE'::text
GROUP BY h.id, f.id, fs.id, fs.insert_date, p.insert_date;

create or replace function pg_stat_statements_reset() returns void
    parallel safe
    language c
as
$$
begin
-- missing source code
end;
$$;

create or replace function pg_stat_statements(showtext boolean, out userid oid, out dbid oid, out queryid bigint, out query text, out calls bigint, out total_time double precision, out min_time double precision, out max_time double precision, out mean_time double precision, out stddev_time double precision, out rows bigint, out shared_blks_hit bigint, out shared_blks_read bigint, out shared_blks_dirtied bigint, out shared_blks_written bigint, out local_blks_hit bigint, out local_blks_read bigint, out local_blks_dirtied bigint, out local_blks_written bigint, out temp_blks_read bigint, out temp_blks_written bigint, out blk_read_time double precision, out blk_write_time double precision) returns setof setof record
    strict
    parallel safe
    language c
as
$$
begin
-- missing source code
end;

$$;

create or replace function pg_buffercache_pages() returns setof setof record
    parallel safe
    language c
as
$$
begin
-- missing source code
end;

$$;

grant execute on function pg_buffercache_pages() to pg_monitor;

create or replace function disable_previous_tokens() returns trigger
    language plpgsql
as
$$
begin
    update refresh_tokens
    set status = 'NOT_ACTIVE'
    where status = 'ACTIVE' and client_id = new.client_id;
    return new;
end
$$;

create trigger disable_previous_tokens
    before insert
    on refresh_tokens
    for each row
execute procedure disable_previous_tokens();

create or replace function re_numeric_seats() returns trigger
    language plpgsql
as
$$
begin
    update seats
    set number = number - 1
    where number > old.number and row = old.row and hall_id = old.hall_id;
    return old;
end
$$;

create trigger re_numeric_seats_update_status
    after update
    on seats
    for each row
    when (new.status::text = 'NOT_ACTIVE'::text)
execute procedure re_numeric_seats();

create trigger re_numeric_seats_delete
    after delete
    on seats
    for each row
execute procedure re_numeric_seats();

create or replace function get_duration(film_id bigint) returns interval
    language plpgsql
as
$$
declare
    d integer;
begin
    select duration
    into d
    from films
    where film_id = id;
    return make_interval(mins := d);
end
$$;

create or replace function check_free() returns trigger
    language plpgsql
as
$$
declare
    c int;
begin
    select count(*)
    into c
    from film_screenings fs
             join films f on fs.film_id = f.id
    where ((new.date between fs.date and fs.date + make_interval(mins := f.duration)) or
           (fs.date between new.date and new.date + get_duration(new.film_id)))
      and fs.id != new.id
      and fs.hall_id = new.hall_id
      and fs.status = 'ACTIVE'
      and new.status = 'ACTIVE';
    if (c != 0) then
        raise exception 'hall busy in %', new.date;
    end if;
    return new;
end
$$;

create trigger check_free_insert
    before insert
    on film_screenings
    for each row
execute procedure check_free();

create trigger check_free_update
    before update
    on film_screenings
    for each row
    when (old.status::text <> new.status::text OR old.date <> new.date)
execute procedure check_free();

create or replace function size_hall(hallid bigint) returns integer
    language plpgsql
as
$$
declare
    size int := 0;
begin
    select count(*) into size from halls
                                       join seats s on halls.id = s.hall_id
    where halls.id = hallId and s.status = 'ACTIVE';
    return size;
end;
$$;


