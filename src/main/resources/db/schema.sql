create table if not exists age_limits
(
    name        varchar(255) not null
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    description varchar(255) not null,
    start_age   integer      not null
);

create table if not exists countries
(
    code        varchar(255) not null
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    full_name   varchar(255) not null,
    short_name  varchar(255) not null
);

create table if not exists films
(
    id                  bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    status              varchar(255)                                       not null,
    insert_date         timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date         timestamp with time zone,
    date_local_premiere timestamp with time zone                           not null,
    name                varchar(255)                                       not null,
    plot                text                     default ''::text          not null,
    date_world_premiere timestamp with time zone,
    age_limit_id        varchar(255)                                       not null
        references age_limits,
    duration            integer                  default 0                 not null
);

create table if not exists country_film
(
    id         bigint generated always as identity (maxvalue 2147483647)
        primary key,
    film_id    bigint       not null
        references films,
    country_id varchar(255) not null
        references countries
);

create table if not exists film_posters
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    filename    varchar(255) not null,
    film_id     bigint       not null
        references films
);

create table if not exists filmmakers
(
    id          bigint generated by default as identity
        primary key,
    first_name  varchar(255)                                       not null,
    last_name   varchar(255)                                       not null,
    patronymic  varchar(255),
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create table if not exists filmmaker_posts
(
    id           bigint generated by default as identity
        primary key,
    name         varchar(255)                                       not null,
    filmmaker_id bigint                                             not null
        references filmmakers
            on update cascade on delete cascade,
    film_id      bigint                                             not null
        references films,
    insert_date  timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date  timestamp with time zone,
    status       varchar(255)                                       not null
);

create table if not exists halls
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    name        varchar(255)                                       not null
);

create table if not exists film_screenings
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    date        timestamp with time zone           not null,
    film_id     bigint                             not null
        references films,
    hall_id     bigint                             not null
        references halls,
    price       numeric(10, 4)           default 0 not null
);

create table if not exists seats
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    unused      boolean                  default false             not null,
    number      integer                                            not null,
    row         integer                                            not null,
    hall_id     bigint                                             not null
        references halls
);

create table if not exists users
(
    id            bigint generated by default as identity
        primary key,
    status        varchar(255)                                       not null,
    insert_date   timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date   timestamp with time zone,
    hash_password varchar(255)                                       not null,
    user_status   varchar(255)                                       not null,
    username      varchar(255)                                       not null
        unique,
    first_name    varchar(255)                                       not null,
    last_name     varchar(255)                                       not null,
    patronymic    varchar(255),
    gender        varchar(255)                                       not null,
    birth_date    timestamp with time zone                           not null
);

create table if not exists user_roles
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    role        varchar(255)                                       not null,
    user_id     bigint                                             not null
        references users
);

create table if not exists customers
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    user_id     bigint       not null
        references users
);

create table if not exists employees
(
    id          bigint generated by default as identity,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    post        varchar(255) not null,
    user_id     bigint       not null
        references users
);

create table if not exists reservations
(
    id                bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    status            varchar(255)                                       not null,
    insert_date       timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date       timestamp with time zone,
    expiry_date       timestamp with time zone                           not null,
    user_id           bigint                                             not null
        references users,
    film_screening_id bigint                                             not null
        references film_screenings,
    place_id          bigint                                             not null
        references seats
);

create table if not exists purchases
(
    id          bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    user_id     bigint                                             not null
        references users,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create table if not exists tickets
(
    id                bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    status            varchar(255)                                       not null,
    insert_date       timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date       timestamp with time zone,
    film_screening_id bigint                                             not null
        references film_screenings,
    seat_id           bigint                                             not null
        references seats,
    purchase_id       bigint                                             not null
        constraint tickets_purchases_id_fk
            references purchases,
    price             numeric(10, 3)                                     not null
);

create table if not exists film_ratings
(
    id          bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    user_id     bigint                                             not null
        references users,
    film_id     bigint                                             not null
        references films,
    mark        integer                                            not null
        constraint film_ratings_rating_check
            check ((mark > 0) AND (mark <= 10)),
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create unique index if not exists film_ratings_customer_id_film_id_uindex
    on film_ratings (user_id, film_id);

create table if not exists client_sessions
(
    id          uuid                                               not null
        primary key,
    name        varchar(255),
    client_ipv4 varchar(255),
    client_ipv6 varchar(255),
    user_id     bigint                                             not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create table if not exists refresh_tokens
(
    id          bigint generated by default as identity
        primary key,
    token       varchar(255)                                       not null
        unique,
    client_id   uuid                                               not null
        references client_sessions,
    expiry_date timestamp with time zone                           not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create table if not exists ticket_refunds
(
    id        bigserial
        constraint ticket_refunds_pk
            primary key,
    ticket_id bigint                                             not null
        constraint ticket_refunds_tickets_id_fk
            references tickets,
    date      timestamp with time zone default CURRENT_TIMESTAMP not null
);

create table if not exists user_notifications
(
    id                  bigint generated always as identity
        primary key,
    user_id             bigint                                                           not null
        references users,
    message             varchar(500)                                                     not null,
    insert_date         timestamp with time zone default CURRENT_TIMESTAMP               not null,
    update_date         timestamp with time zone,
    status              varchar(255)             default 'ACTIVE'::character varying     not null,
    notification_status varchar(255)             default 'NOT_VIEWED'::character varying not null
        constraint user_notifications_notification_status_check
            check ((notification_status)::text = ANY
                   ((ARRAY ['VIEWED'::character varying, 'NOT_VIEWED'::character varying])::text[]))
);

create view screening_seats(id, number, row, screening_id, status_seat) as
SELECT DISTINCT s.id,
                s.number,
                s."row",
                fs.id                         AS screening_id,
                CASE
                    WHEN t.status::text = 'ACTIVE'::text THEN 'BOUGHT'::text
                    WHEN r.status::text = 'ACTIVE'::text AND r.expiry_date > CURRENT_TIMESTAMP THEN 'RESERVED'::text
                    WHEN s.unused = true THEN 'UNUSED'::text
                    ELSE 'FREE'::text
                    END::character varying(8) AS status_seat
FROM seats s
         JOIN halls h ON h.id = s.hall_id
         JOIN film_screenings fs ON h.id = fs.hall_id
         LEFT JOIN tickets t ON s.id = t.seat_id AND t.film_screening_id = fs.id AND t.status::text = 'ACTIVE'::text
         LEFT JOIN reservations r
                   ON s.id = r.place_id AND r.film_screening_id = fs.id AND r.expiry_date > CURRENT_TIMESTAMP AND
                      r.status::text = 'ACTIVE'::text
WHERE s.status::text = 'ACTIVE'::text
  AND fs.status::text = 'ACTIVE'::text
  AND h.status::text = 'ACTIVE'::text;

create view sold_tickets(start_period, end_period, purchase_id, count, avg_price, rowid) as
SELECT date_trunc('month'::text, p.insert_date)                                AS start_period,
       date_trunc('month'::text, p.insert_date) + '1 mon'::interval            AS end_period,
       p.id                                                                    AS purchase_id,
       count(*)                                                                AS count,
       avg(t.price)                                                            AS avg_price,
       row_number() OVER (ORDER BY (date_trunc('month'::text, p.insert_date))) AS rowid
FROM tickets t
         JOIN purchases p ON p.id = t.purchase_id
WHERE p.status::text = 'ACTIVE'::text
GROUP BY ROLLUP (((date_trunc('month'::text, p.insert_date)),
                  (date_trunc('month'::text, p.insert_date) + '1 mon'::interval)), p.id);

create view occupancy_hall(rowid, screening_id, hall_id, avg_occupancy, count_busy, count_all) as
SELECT row_number() OVER (ORDER BY fs.id)                AS rowid,
       fs.id                                             AS screening_id,
       h.id                                              AS hall_id,
       count(t.id)::real / count(s.id)::double precision AS avg_occupancy,
       count(t.id)                                       AS count_busy,
       count(s.id)                                       AS count_all
FROM film_screenings fs
         JOIN halls h ON h.id = fs.hall_id
         JOIN seats s ON h.id = s.hall_id
         LEFT JOIN tickets t ON s.id = t.seat_id AND fs.id = t.film_screening_id
GROUP BY ROLLUP (h.id, fs.id);

create view box_office_reporting(rowid, year, quarter, month, film_id, sum, avg) as
SELECT row_number() OVER (ORDER BY f.id) AS rowid,
       EXTRACT(year FROM fs.date)        AS year,
       EXTRACT(quarter FROM fs.date)     AS quarter,
       EXTRACT(month FROM fs.date)       AS month,
       f.id                              AS film_id,
       sum(t.price)                      AS sum,
       avg(t.price)                      AS avg
FROM tickets t
         JOIN film_screenings fs ON t.film_screening_id = fs.id
         JOIN films f ON f.id = fs.film_id
WHERE t.status::text = 'ACTIVE'::text
GROUP BY GROUPING SETS (ROLLUP (f.id, (EXTRACT(year FROM fs.date)), (EXTRACT(quarter FROM fs.date)),
                                (EXTRACT(month FROM fs.date))),
                                ((EXTRACT(year FROM fs.date)), (EXTRACT(quarter FROM fs.date)),
                                 (EXTRACT(month FROM fs.date))),
                                ((EXTRACT(year FROM fs.date)), (EXTRACT(quarter FROM fs.date))),
                                ((EXTRACT(year FROM fs.date))));

create view occupancy_film
            (hallid, id, status, insert_date, update_date, date, film_id, hall_id, price, size_hall, busy_seats,
             occupancy) as
SELECT h.id                                                               AS hallid,
       fs.id,
       fs.status,
       fs.insert_date,
       fs.update_date,
       fs.date,
       fs.film_id,
       fs.hall_id,
       fs.price,
       size_hall(h.id)                                                    AS size_hall,
       count(t.film_screening_id)                                         AS busy_seats,
       count(fs.id)::double precision / size_hall(h.id)::double precision AS occupancy
FROM seats
         JOIN tickets t ON seats.id = t.seat_id
         JOIN halls h ON h.id = seats.hall_id
         JOIN film_screenings fs ON fs.id = t.film_screening_id
WHERE seats.unused = false
  AND t.status::text = 'ACTIVE'::text
GROUP BY h.id, fs.id;

create function size_hall(hallid bigint) returns integer
    language plpgsql
as
$$
declare
    size int := 0;
begin
    select count(*) into size from halls
                                       join seats s on halls.id = s.hall_id
    where halls.id = hallId;
    return size;
end;
$$;

create function re_numeric_seats() returns trigger
    language plpgsql
as
$$
begin
    update seats
    set number = number - 1
    where number > old.number and row = old.row;
    return old;
end
$$;

create trigger re_numeric_seats
    after delete
    on seats
    for each row
execute procedure re_numeric_seats();

create function check_free() returns trigger
    language plpgsql
as
$$
declare
    c int;
begin
    select count(*)
    into c
    from film_screenings fs
             join films f on fs.film_id = f.id
    where ((new.date between fs.date and fs.date + make_interval(mins := f.duration)) or (fs.date between new.date and new.date + get_duration(new.film_id)))
      and fs.id != new.id
      and fs.hall_id = new.hall_id
      and fs.status = 'ACTIVE'
      and new.status = 'ACTIVE';
    if (c != 0) then
        raise exception 'hall busy in %', new.date;
    end if;
    return new;
end
$$;

create trigger check_free_insert
    before insert
    on film_screenings
    for each row
execute procedure check_free();

create trigger check_free_update
    before update
    on film_screenings
    for each row
    when (old.status::text <> new.status::text OR old.date <> new.date)
execute procedure check_free();

create function get_duration(film_id bigint) returns interval
    language plpgsql
as
$$
declare
    d integer;
begin
    select duration into d from films
    where film_id = id;
    return make_interval(mins := d);
end
$$;

create function disable_previous_tokens() returns trigger
    language plpgsql
as
$$
begin
    update refresh_tokens
    set status = 'NOT_ACTIVE'
    where status = 'ACTIVE' and client_id = new.client_id;
    return new;
end
$$;

create trigger disable_previous_tokens
    before insert
    on refresh_tokens
    for each row
execute procedure disable_previous_tokens();

