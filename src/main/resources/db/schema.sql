create table if not exists age_limits
(
    name        varchar(255) not null
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    description varchar(255) not null,
    start_age   integer      not null
);

alter table age_limits
    owner to cinema;

create table if not exists countries
(
    code        varchar(255) not null
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    full_name   varchar(255) not null,
    short_name  varchar(255) not null
);

alter table countries
    owner to cinema;

create table if not exists films
(
    id                  bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    status              varchar(255)                                       not null,
    insert_date         timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date         timestamp with time zone,
    date_local_premiere timestamp with time zone                           not null,
    name                varchar(255)                                       not null,
    plot                text                     default ''::text          not null,
    date_world_premiere timestamp with time zone,
    age_limit_id        varchar(255)                                       not null
        references age_limits,
    duration            integer                  default 0                 not null
);

alter table films
    owner to cinema;

create table if not exists country_film
(
    id         bigint generated always as identity (maxvalue 2147483647)
        primary key,
    film_id    bigint       not null
        references films,
    country_id varchar(255) not null
        references countries
);

alter table country_film
    owner to cinema;

create table if not exists film_posters
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    filename    varchar(255) not null,
    film_id     bigint       not null
        references films
);

alter table film_posters
    owner to cinema;

create table if not exists filmmakers
(
    id          bigint generated by default as identity
        primary key,
    first_name  varchar(255)                                       not null,
    last_name   varchar(255)                                       not null,
    patronymic  varchar(255),
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

alter table filmmakers
    owner to cinema;

create table if not exists filmmaker_posts
(
    id           bigint generated by default as identity
        primary key,
    name         varchar(255)                                       not null,
    filmmaker_id bigint                                             not null
        references filmmakers
            on update cascade on delete cascade,
    film_id      bigint                                             not null
        references films,
    insert_date  timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date  timestamp with time zone,
    status       varchar(255)                                       not null
);

alter table filmmaker_posts
    owner to cinema;

create table if not exists halls
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    name        varchar(255)                                       not null
);

alter table halls
    owner to cinema;

create table if not exists film_screenings
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    date        timestamp with time zone           not null,
    film_id     bigint                             not null
        references films,
    hall_id     bigint                             not null
        references halls,
    price       numeric(10, 4)           default 0 not null
);

alter table film_screenings
    owner to cinema;

create table if not exists seats
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    unused      boolean                  default false             not null,
    number      integer                                            not null,
    row         integer                                            not null,
    hall_id     bigint                                             not null
        references halls
);

alter table seats
    owner to cinema;

create table if not exists users
(
    id            bigint generated by default as identity
        primary key,
    status        varchar(255)                                       not null,
    insert_date   timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date   timestamp with time zone,
    hash_password varchar(255)                                       not null,
    user_status   varchar(255)                                       not null,
    username      varchar(255)                                       not null
        unique,
    first_name    varchar(255)                                       not null,
    last_name     varchar(255)                                       not null,
    patronymic    varchar(255),
    gender        varchar(255)                                       not null,
    birth_date    timestamp with time zone                           not null
);

alter table users
    owner to cinema;

create table if not exists user_roles
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255)                                       not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    role        varchar(255)                                       not null,
    user_id     bigint                                             not null
        references users
);

alter table user_roles
    owner to cinema;

create table if not exists customers
(
    id          bigint generated by default as identity
        primary key,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    user_id     bigint       not null
        references users
);

alter table customers
    owner to cinema;

create table if not exists employees
(
    id          bigint generated by default as identity,
    status      varchar(255) not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP,
    update_date timestamp with time zone,
    post        varchar(255) not null,
    user_id     bigint       not null
        references users
);

alter table employees
    owner to cinema;

create table if not exists reservations
(
    id                bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    status            varchar(255)                                       not null,
    insert_date       timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date       timestamp with time zone,
    expiry_date       timestamp with time zone                           not null,
    user_id           bigint                                             not null
        references users,
    film_screening_id bigint                                             not null
        references film_screenings,
    place_id          bigint                                             not null
        references seats
);

alter table reservations
    owner to cinema;

create table if not exists purchases
(
    id          bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    user_id     bigint                                             not null
        references users,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

alter table purchases
    owner to cinema;

create table if not exists tickets
(
    id                bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    status            varchar(255)                                       not null,
    insert_date       timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date       timestamp with time zone,
    film_screening_id bigint                                             not null
        references film_screenings,
    seat_id           bigint                                             not null
        references seats,
    purchase_id       bigint                                             not null
        constraint tickets_purchases_id_fk
            references purchases,
    price             numeric(10, 3)                                     not null
);

alter table tickets
    owner to cinema;

create table if not exists film_ratings
(
    id          bigint generated by default as identity (maxvalue 2147483647)
        primary key,
    user_id     bigint                                             not null
        references users,
    film_id     bigint                                             not null
        references films,
    rating      integer                                            not null
        constraint film_ratings_rating_check
            check ((rating > 0) AND (rating <= 10)),
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

alter table film_ratings
    owner to cinema;

create unique index if not exists film_ratings_customer_id_film_id_uindex
    on film_ratings (user_id, film_id);

create table if not exists client_sessions
(
    id          uuid                                               not null
        primary key,
    name        varchar(255),
    client_ipv4 varchar(255),
    client_ipv6 varchar(255),
    user_id     bigint                                             not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

alter table client_sessions
    owner to cinema;

create table if not exists refresh_tokens
(
    id          bigint generated by default as identity
        primary key,
    token       varchar(255)                                       not null
        unique,
    client_id   uuid                                               not null
        references client_sessions,
    expiry_date timestamp with time zone                           not null,
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

alter table refresh_tokens
    owner to cinema;

create or replace view screening_seats(id, number, row, screening_id, status_seat) as
SELECT DISTINCT s.id,
                s.number,
                s."row",
                fs.id                         AS screening_id,
                CASE
                    WHEN t.status::text = 'ACTIVE'::text THEN 'BOUGHT'::text
                    WHEN r.status::text = 'ACTIVE'::text AND r.expiry_date > CURRENT_TIMESTAMP THEN 'RESERVED'::text
                    WHEN s.unused = true THEN 'UNUSED'::text
                    ELSE 'FREE'::text
                    END::character varying(8) AS status_seat
FROM seats s
         JOIN halls h ON h.id = s.hall_id
         JOIN film_screenings fs ON h.id = fs.hall_id
         LEFT JOIN tickets t ON s.id = t.seat_id and t.film_screening_id = fs.id and t.status = 'ACTIVE'
         LEFT JOIN reservations r
                   ON s.id = r.place_id and r.film_screening_id = fs.id and r.expiry_date > CURRENT_TIMESTAMP and
                      r.status = 'ACTIVE'
WHERE s.status::text = 'ACTIVE'::text
  AND fs.status::text = 'ACTIVE'::text
  AND h.status::text = 'ACTIVE'::text;

alter table screening_seats
    owner to cinema;

create or replace function re_numeric_seats() returns trigger
    language plpgsql
as
$$
begin
    update seats
    set number = number - 1
    where number > old.number
      and row = old.row;
    return old;
end
$$;

alter function re_numeric_seats() owner to cinema;

create trigger re_numeric_seats
    after delete
    on seats
    for each row
execute procedure re_numeric_seats();

drop function get_duration(film_id bigint);
create or replace function get_duration(film_id bigint)
    returns interval
    language plpgsql as
$$
declare
    d integer;
begin
    select duration
    into d
    from films
    where film_id = id;
    return make_interval(mins := d);
end
$$;


create or replace function check_free() returns trigger
    language plpgsql
as
$$
declare
    c int;
begin
    select count(*)
    into c
    from film_screenings fs
             join films f on fs.film_id = f.id
    where ((new.date between fs.date and fs.date + make_interval(mins := f.duration)) or
           (fs.date between new.date and new.date + get_duration(new.film_id)))
      and fs.id != new.id
      and fs.hall_id = new.hall_id
      and fs.status = 'ACTIVE'
      and new.status = 'ACTIVE';
    if (c != 0) then
        raise exception 'hall busy in %', new.date;
    end if;
    return new;
end
$$;

alter function check_free() owner to cinema;


create trigger check_free_insert
    before insert
    on film_screenings
    for each row
execute procedure check_free();

create trigger check_free_update
    before update
    on film_screenings
    for each row
    when ( old.status != new.status or old.date != new.date)
execute procedure check_free();

create or replace view box_office_receipts as
select row_number() over (order by f.id) as rowid,
       extract(year from fs.date)        as year,
       extract(quarter from fs.date)     as quarter,
       extract(month from fs.date)       as month,
       f.id                              as film_id,
       sum(t.price)                      as sum,
       avg(t.price)                      as avg
from tickets t
         join film_screenings fs on t.film_screening_id = fs.id
         join films f on f.id = fs.film_id
where t.status = 'ACTIVE'
group by grouping sets (rollup (f.id, year, quarter, month), (year, quarter, month), (year, quarter), (year));

create or replace view sold_tickets as
select (date_trunc('month', p.insert_date))                            as start_period,
       (date_trunc('month', p.insert_date) + interval '1 month')       as end_period,
       p.id                                                            as purchase_id,
       count(*)                                                        as count,
       avg(t.price)                                                    as avg_price,
       row_number() over (order by date_trunc('month', p.insert_date)) as rowid
from tickets t
         join purchases p on p.id = t.purchase_id
where p.status = 'ACTIVE'
group by rollup ((start_period, end_period), p.id);

create or replace view occupancy_hall as
select row_number() over (order by fs.id) as rowid,
       fs.id                              as screening_id,
       h.id                               as hall_id,
       count(t.id)::real / count(s.id)    as avg_occupancy,
       count(t.id)                        as count_busy,
       count(s.id)                        as count_all
from film_screenings fs
         join halls h on h.id = fs.hall_id
         join seats s on h.id = s.hall_id
         left join tickets t on s.id = t.seat_id and fs.id = t.film_screening_id
group by rollup (h.id, fs.id);

create table if not exists user_notifications (
    id bigint generated always as identity primary key,
    user_id bigint references users(id) not null,
    message varchar(500) not null,
    insert_date timestamptz not null default current_timestamp,
    update_date timestamptz,
    status varchar(255) not null default 'ACTIVE',
    notification_status varchar(255) not null check ( notification_status in ('VIEWED', 'NOT_VIEWED')) default 'NOT_VIEWED'
)