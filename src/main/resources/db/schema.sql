drop view if exists screening_places cascade;
drop table if exists film_rating cascade;
drop table if exists tickets cascade;
drop table if exists reservations cascade;
drop table if exists purchases cascade;
drop table if exists employees cascade;
drop table if exists customers cascade;
drop table if exists user_roles cascade;
drop table if exists users cascade;
drop table if exists seats cascade;
drop table if exists film_screenings cascade;
drop table if exists halls cascade;
drop table if exists filmmaker_posts cascade;
drop table if exists filmmakers cascade;
drop table if exists film_posters cascade;
drop table if exists country_film cascade;
drop table if exists films cascade;
drop table if exists countries cascade;
drop table if exists age_limits cascade;
drop table if exists client_sessions cascade;
drop table if exists refresh_tokens cascade;
drop table if exists film_ratings cascade;

CREATE TABLE IF NOT EXISTS age_limits
(
    name varchar
(
    255
) NOT NULL primary key,
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              description varchar (255) NOT NULL,
    start_age integer NOT NULL
    );

CREATE TABLE IF NOT EXISTS countries
(
    code varchar
(
    255
) primary key,
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              full_name varchar (255) NOT NULL,
    short_name varchar
(
    255
) NOT NULL
    );

CREATE TABLE IF NOT EXISTS films
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone NOT NULL DEFAULT current_timestamp,
    update_date timestamp with time zone,
    date_local_premiere timestamp with time zone NOT NULL,
                                      name varchar (255) NOT NULL,
    plot text NOT NULL DEFAULT '',
    date_world_premiere timestamp
                                  with time zone,
                                      age_limit_id varchar (255) NOT NULL REFERENCES age_limits
(
    name
)
    );

CREATE TABLE IF NOT EXISTS country_film
(
    id bigint PRIMARY KEY NOT NULL GENERATED ALWAYS AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    film_id bigint NOT NULL REFERENCES films
(
    id
),
    country_id varchar
(
    255
) NOT NULL REFERENCES countries
(
    code
)
    );

CREATE TABLE IF NOT EXISTS film_posters
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              filename varchar (255) NOT NULL,
    film_id bigint NOT NULL REFERENCES films
(
    id
)
    );

CREATE TABLE IF NOT EXISTS filmmakers
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    first_name varchar
(
    255
) NOT NULL,
    last_name varchar
(
    255
) NOT NULL,
    patronymic varchar
(
    255
),
    insert_date timestamp with time zone NOT NULL DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              status varchar (255) NOT NULL
    );

CREATE TABLE IF NOT EXISTS filmmaker_posts
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    name varchar
(
    255
) NOT NULL,
    filmmaker_id bigint NOT NULL REFERENCES filmmakers
(
    id
) on delete cascade
  on update cascade,
    film_id bigint NOT NULL REFERENCES films
(
    id
),
    insert_date timestamp with time zone NOT NULL DEFAULT current_timestamp,
    update_date timestamp
  with time zone,
      status varchar (255) NOT NULL
    );

CREATE TABLE IF NOT EXISTS halls
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone NOT NULL DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              name varchar (255) NOT NULL
    );

CREATE TABLE IF NOT EXISTS film_screenings
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone DEFAULT current_timestamp,
    update_date timestamp with time zone,
    date timestamp with time zone NOT NULL,
                       film_id bigint NOT NULL REFERENCES films (id),
    hall_id bigint NOT NULL REFERENCES halls
(
    id
),
    price numeric
(
    10,
    4
) NOT NULL DEFAULT 0
    );


CREATE TABLE IF NOT EXISTS seats
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) not null,
    insert_date timestamp with time zone NOT NULL DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              unused boolean NOT NULL NOT NULL DEFAULT FALSE,
                              "number" int NOT NULL,
                              "row" int NOT NULL,
                              hall_id bigint NOT NULL REFERENCES halls (id)
    );

CREATE TABLE IF NOT EXISTS users
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone NOT NULL DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              hash_password varchar (255) NOT NULL,
    user_status varchar
(
    255
) NOT NULL,
    username varchar
(
    255
) UNIQUE NOT NULL,
    first_name varchar
(
    255
) NOT NULL,
    last_name varchar
(
    255
) NOT NULL,
    patronymic varchar
(
    255
),
    gender varchar
(
    255
) NOT NULL,
    birth_date timestamp
                          with time zone NOT NULL
                              );

CREATE TABLE IF NOT EXISTS user_roles
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone NOT NULL DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              role varchar (255) NOT NULL,
    user_id bigint NOT NULL REFERENCES users
(
    id
)
    );

CREATE TABLE IF NOT EXISTS customers
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              user_id bigint NOT NULL REFERENCES users (id)
    );

CREATE TABLE IF NOT EXISTS employees
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              post varchar (255) NOT NULL,
    user_id bigint NOT NULL REFERENCES users
(
    id
)
    );

CREATE TABLE IF NOT EXISTS reservations
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone NOT NULL DEFAULT current_timestamp,
    update_date timestamp with time zone,
    expiry_date timestamp with time zone NOT NULL,
                              customer_id bigint NOT NULL REFERENCES customers (id),
    film_screening_id bigint NOT NULL REFERENCES film_screenings
(
    id
),
    place_id bigint NOT NULL REFERENCES seats
(
    id
)
    );

CREATE TABLE IF NOT EXISTS tickets
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    status varchar
(
    255
) NOT NULL,
    insert_date timestamp with time zone NOT NULL DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              film_screening_id bigint NOT NULL REFERENCES film_screenings (id),
    customer_id bigint NOT NULL REFERENCES customers
(
    id
),
    seat_id bigint NOT NULL REFERENCES seats
(
    id
)
    );

CREATE TABLE IF NOT EXISTS purchases
(
    id bigint PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY
(
    INCREMENT 1 START 1 MINVALUE 1
),
    customer_id bigint NOT NULL REFERENCES customers
(
    id
),
    ticket_id bigint NOT NULL REFERENCES tickets
(
    id
),
    price numeric
(
    10,
    4
) NOT NULL DEFAULT 0,
    insert_date timestamp with time zone NOT NULL DEFAULT current_timestamp,
    update_date timestamp with time zone,
                              status varchar (255) NOT NULL
    );

CREATE VIEW screening_seats AS
SELECT DISTINCT s.id,
                s.number,
                s.row,
                fs.id as screening_id,
                CASE
                    WHEN t.status = 'ACTIVE' THEN 'BOUGHT'
                    WHEN r.status = 'ACTIVE' and r.expiry_date > current_timestamp THEN 'RESERVED'
                    WHEN s.unused = True THEN 'UNUSED'
                    ELSE 'FREE'
                    END :: varchar(8) as status_seat
FROM seats as s
         JOIN halls h on h.id = s.hall_id
         JOIN film_screenings fs on s.hall_id = fs.hall_id
         LEFT OUTER JOIN tickets t on s.id = t.seat_id
         LEFT OUTER JOIN reservations r on s.id = r.place_id
WHERE s.status = 'ACTIVE'
  AND fs.status = 'ACTIVE'
  and h.status = 'ACTIVE';


create table film_ratings
(
    id          bigint primary key generated by default as identity (increment 1 start 1 minvalue 1),
    customer_id bigint                                             not null references customers (id),
    film_id     bigint                                             not null references films (id),
    rating      integer                                            not null check ((rating > 0) AND (rating <= 10)),
    insert_date timestamp with time zone default CURRENT_TIMESTAMP not null,
    update_date timestamp with time zone,
    status      varchar(255)                                       not null
);

create unique index film_ratings_customer_id_film_id_uindex
    on film_ratings (customer_id, film_id);

create table client_sessions
(
    id          uuid primary key,
    name        varchar(255),
    client_ipv4 varchar(255),
    client_ipv6 varchar(255),
    user_id     bigint       not null,
    insert_date timestamptz  not null default current_timestamp,
    update_date timestamptz,
    status      varchar(255) not null
);

create table refresh_tokens
(
    id          bigint primary key generated by default as identity (increment 1 start 1 minvalue 1),
    token       varchar(255) not null unique,
    client_id   uuid         not null references client_sessions (id),
    expiry_date timestamptz  not null,
    insert_date timestamptz  not null default current_timestamp,
    update_date timestamptz,
    status      varchar(255) not null
);

-- create or replace function disable_all_posts() returns trigger as
-- $disable_all_posts$
-- begin
--     update filmmaker_posts
--     set status = 'NOT_ACTIVE'
--     where filmmaker_id = new.id;
-- end;
-- $disable_all_posts$ language plpgsql;
--
-- create trigger disable_all_posts
--     before update
--     on filmmakers
--     for each row
--     when ( new.status = 'NOT_ACTIVE' )
-- execute procedure disable_all_posts();


create
or replace function re_numeric_seats() returns trigger as
$re_numeric_seats$
begin
update seats
set number = number - 1
where number > old.number
  and row = old.row;
return old;
end
$re_numeric_seats$
language plpgsql;

create trigger re_numeric_seats
    after delete
    on seats
    for each row
    execute procedure re_numeric_seats();